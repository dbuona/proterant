length(d.mus)
length(t50s)
length(betas)
# I wasn't sure what all the apply commans were doing
# I suggest we stick with loops so I can be more help
# Here's an example one:
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(d.mus))){ # i <- 1
d.muhere <- d.mus[i]
t50here <- t50s[i]
betahere <- betas[i]
chilltreathere <- chilltreat[i]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(j in 1:repz){
# not 100% sure that time works as you think here, would be good to double check.
y <- rtnorm(1, d.muhere, d.sd, lower=d.low, upper=d.up)/
(1+((time/rnorm(1, t50here, t50.sd))^rnorm(1, betahere, beta.sd)))
dfrepadd <- data.frame(time=time, y=y, ID=rep(i, length(A)), chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
###fake data for germination mdodels
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
# library(drc)
# library(tidyverse) # don't load this if you don't need it, overwrites a lot of useful stuff.
library(MCMCglmm) # rtnorm
library(shinystan)
library(drc)
library(rstan)
library(rstanarm)
library(bayesplot)
options(mc.cores = parallel::detectCores())
setwd("~/Desktop/meremoments/Dan")
##use lognoral to simulate the data
set.seed(613613)
###This make data folowing the log logistic function
germ<-function(t,d,b,t50){
y<- d/(1+((t/t50)^b))
return(data.frame(time=t, y=y))
}
## no chill, cool inc
# Not sure if needed, but an easier way to do letters...
A <- rep(1:10, each=9)
A <- as.character(A)
# reps
repz <- 10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
d.sd <- 1
t50.sd <- 3
beta.sd <- 0.2
# vectors of d.mu, t50, beta values
chilltreat <- c(0:8) # for ease, setting up as 8 levels of chilling ... this is the main driver of differences in this part of the code I think
###fake data for germination mdodels
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
# library(drc)
# library(tidyverse) # don't load this if you don't need it, overwrites a lot of useful stuff.
library(MCMCglmm) # rtnorm
chilltreat <- c(0, 1) # We need to use this in the equation! Just the way you do in Stan
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- c(4)
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 3
chill.d <- 2
chill.t50 <- -2
chill.beta <- 1
sigma_y <- 0.1
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
repz=10
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
View(test.dat)
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 10
chill.d <- 2
chill.t50 <- -5
chill.beta <- -1
sigma_y <- 0.1
repz=10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 10
chill.d <- 0
chill.t50 <- -5
chill.beta <- -1
sigma_y <- 0.1
repz=10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
?rep()
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(9, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
chilltreat <- c(0,1,2) # We need to use this in the equation! Just the way you do in Stan
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 10
chill.d <- 0
chill.t50 <- -5
chill.beta <- -1
sigma_y <- 0.1
repz=10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(1:9, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
96+50+1447+108+300+500
96+50+1447+108+300+500+400
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
Library(ggplot)
library(ggplot)
library(ggplot2)
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
#library(devtools)
#install_github("rmcelreath/rethinking")
library(rstan)
library(ape)
setwd("~/Documents/git/proterant/stan")
tre = rtree(4000)
plot(tre)
x = rTrait(n=1,phy=tre)
X = cbind(rep(1,50),x)
x = rTrait(n=1,phy=tre)
install.packages("rbinTrait")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("binary_stan_nophylo.stan")
####March 4 2019/ Dan notes, the model is running but not really returning the proper parameters.
##wait, I now its returning the propper paramenters, wih a ton of divergetn transitions
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
### fake hysteranthy data
#library(devtools)
#install_github("rmcelreath/rethinking")
library(rstan)
setwd("~/Documents/git/proterant/stan")
set.seed(613)
# Params
alpha<-1.5
b_pol<-3
b_flotime<--.5
b_minP<--.1
# x data
ndata <- 4000
pol<-rbinom(ndata,1,0.5)
flotime<-runif(ndata,4.5,8.5)
minP<-rnorm(ndata,8,2)
z <-alpha+b_pol*pol+b_flotime*flotime+b_minP*minP
# inverse logit -- this is the reverse of logit(p) in the model code
p <- 1/(1+exp(-z))
# now, can get bernoulli
y <- rbinom(ndata, 1, p)
dat <- as.data.frame(cbind(pol,flotime,minP,y))
#dat$pol.z<-NA
#dat$flo_time.z<-NA
#dat$
datalist<- with(dat,
list(y=y,
pol=pol,
flotime=flotime,
minP=minP,
N = nrow(dat)
))
berny<- stan('binary_stan_nophylo.stan', data = datalist,
iter = 3000, warmup=2000)
berny.sum <- summary(berny)$summary
berny.sum[c("alpha","b_pol","b_flotime","b_minP"),]
rstan:::rstudio_stanc("binary_stan_nophylo.stan")
datalist<- with(dat,
list(y=y,
pol=pol,
flotime=flotime,
minP=minP,
N = nrow(dat)
))
berny<- stan('binary_stan_nophylo.stan', data = datalist,
iter = 3000, warmup=2000)
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
berny.sum <- summary(berny)$summary
berny.sum[c("alpha","b_pol","b_flotime","b_minP"),]
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("binary_stan_nophylo.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
rstan:::rstudio_stanc("pgls_hysteranthy.stan")
