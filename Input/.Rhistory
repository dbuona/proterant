test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
?rep()
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(9, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
chilltreat <- c(0,1,2) # We need to use this in the equation! Just the way you do in Stan
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 10
chill.d <- 0
chill.t50 <- -5
chill.beta <- -1
sigma_y <- 0.1
repz=10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(1:9, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
96+50+1447+108+300+500
96+50+1447+108+300+500+400
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
Library(ggplot)
library(ggplot)
library(ggplot2)
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(grid)
library(gtable)
library(ggthemes)
GDH<-c(376,408,504,472,384,480,480,384)
photo<-c(11,15,15,11,11,11,15,15)
periodicities<-c("coupled","coupled","coupled","coupled","uncoupled","uncoupled","uncoupled","uncoupled")
dat<-data.frame(GDH,photo,periodicities)
x<-c(10.8,10.8,15.2,15.2)
y<-c(382,482,382,482)
xy<-data.frame(x,y)
ploty<-ggplot(dat,(aes(x=photo)))+geom_point(aes(y=GDH,color=periodicities),size=4)+xlim(8,18)+ylim(350,520)+theme_base()+geom_polygon(aes(x=photo,y=GDH,color=periodicities,fill=periodicities),alpha=0.5) +scale_color_manual(values=c("rosybrown","gray10"))+scale_fill_manual(values=c("rosybrown","gray10"))
plotty2<-ploty+geom_rect(dat,mapping=aes(xmin=10.9,xmax=15.1,ymin=382,ymax=482),fill=NA,color="black",size=0.2,linetype="dashed")
plotty2<-plotty2+geom_point(xy,mapping=aes(x,y),shape=8,size=4)+theme(legend.position = "left")
plotty2
xx<-c(1:24)
yy<-rep(25,24)
zz<-rep(15,24)
aa<-c(30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20,20,20,20,20,20,20)
bb<-c(30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20)
cc<-c(20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10)
dd<-c(20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10)
ee<-c(30,30,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20,20,20,20,20)
ff<-c(20,20,20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10,10,10,10,10)
dat.simple<-data.frame(xx,yy,zz,aa,bb,cc,dd,ee,ff)
a<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,yy),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
b<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,yy),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
c<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,zz),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
d<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,zz),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
flat<-ggarrange(a, b,c, d, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
?ggarrange()
aaa<-ggplot(dat.simple,aes(xx,aa))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,aa),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
bbb<-ggplot(dat.simple,aes(xx,bb))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,bb),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ccc<-ggplot(dat.simple,aes(xx,cc))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,cc),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ddd<-ggplot(dat.simple,aes(xx,dd))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,dd),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
covarying<-ggarrange(aaa, bbb,ccc, ddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
aaaa<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
bbbb<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
cccc<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
dddd<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
noncovarying<-ggarrange(aaaa, bbbb,cccc, dddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
grid.arrange(flat,covarying,noncovarying,ncol=3)
grid.rect(width = .5, height = .5, gp = gpar(lwd = 2, col = "black", fill = NA,hjust="left",vjust="top"))
grid.arrange(flat,covarying,noncovarying,ncol=3)
View(dat.simple)
View(dat.simple)
xy
dat
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
treat<-c("warm/short","cool/short","warm/long","warm/long")
dawn<-data.frame(temp,light,treat)
dawn$dawn.offset$(dan$temp-dawn$light)
dawn$dawn.offset$dan$temp-dawn$light
dawn$dawn.offset<-dan$temp-dawn$light
dawn$dawn.offset<-dawn$temp-dawn$light
View(dawn)
require(rstan)
require(geiger)
require(MCMCglmm)
# load data
data(geospiza)
dat <- geospiza$geospiza.data
View(dat)
# create fake sample of trees
tr <- drop.tip(geospiza$geospiza.tree, 'olivacea')
trees <- vector('list', 15)
for(i in 1:15) trees[[i]] <- tr
# get the inverse of the phylovcv, order all to match data
invA <- lapply(trees, function(x) solve(vcv.phylo(x))[row.names(dat), row.names(dat)])
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
phymodel <- "
data {
int<lower=0> N; //species
int<lower=0> Ntree; //number of trees
vector[N] y;
real x[N];
matrix[N,N] invA[Ntree]; //array of inverse of phylovcv?
}
parameters {
real alpha; //intercept
real beta; //slope
real<lower=0> tau; // scaling factor
simplex[Ntree] theta; //mixture sampling?
}
transformed parameters{
real sigma; //regression error
sigma <- 1/sqrt(tau);
}
model {
vector[N] mu; //multivariate normal mean
//priors
alpha ~ normal(0, 10);
beta ~ normal(0, 10);
sigma ~ uniform(0,1000);
tau ~ gamma(1,1);
theta ~ uniform(0,1);
for(n in 1:N){
mu[n] <- alpha+beta*x[n];
}
y ~ multi_normal_prec(mu, tau*invA[Ntree]);
}
"
phystan = stan(model_name="phylogenetic regression", model_code = phymodel, data=stdat , iter = 1000, chains = 2)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
slope<-2
hist(rbeta(1000,10+slope*(time),10),col="blue",xlim=c(0,1), add=TRUE)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(1000,10+slope*(time),10),col="blue",xlim=c(0,1), add=TRUE)
hist(rbeta(1000,10+slope*time,10),col="blue",xlim=c(0,1), add=TRUE)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(1000,10+slope*time[i],10),col="blue",xlim=c(0,1), add=TRUE)
for (i in c(length(time))) {
goober<-rbeta(1000,a+slope*time[i],b)
}
b<-10
for (i in c(length(time))) {
goober<-rbeta(1000,intercept+slope*time[i],b)
}
intercept<-10
b<-10
slope<-2
for (i in c(length(time))) {
goober<-rbeta(1000,intercept+slope*time[i],b)
}
time<-seq(1:20)
for (i in c(length(time))) {
goober<-rbeta(1000,intercept+slope*time[i],b)
}
hist(rbeta(goober,col="blue",xlim=c(0,1), add=TRUE)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(goober,col="blue",xlim=c(0,1), add=TRUE)
hist(rbeta(goober,col="blue",xlim=c(0,1), add=TRUE)
)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(goober,col="blue",xlim=c(0,1), add=TRUE)
)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(goober,col="blue", add=TRUE))
hist(rbeta(1000,goober,10),col="blue", add=TRUE))
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(1000,goober,10),col="blue", add=TRUE)
for (i in c(length(time))) {
goober<-rbeta(1000,10+slope*time[i],b)
}
goober
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(1000,goober,10),col="blue", add=TRUE)
for (i in c(length(time))) {
goober<-rbeta(1000,10+slope*time[i],b)
}
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(rbeta(goober),col="blue", add=TRUE)
hist(goober,col="blue", add=TRUE)
hist(rbeta(1000,10,10),col="red",xlim=c(0,1))
hist(goober,col="blue", add=TRUE)
weather<-read.csv("..//FLOBUDS/data/hf000-01-daily-m.csv",header = TRUE)
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
setwd("~/Documents/git/proterant/Input")
library(ggplot2)
library(tidyr)
library(dplyr)
library(chillR)
library(brms)
library(tibble)
weather<-read.csv("..//FLOBUDS/data/hf000-01-daily-m.csv",header = TRUE)
weather<-select(weather,c("date","airtmax","airtmin"))
weather<-separate(weather,date,c("Year","Month","Day"),sep="-",remove=TRUE)
colnames(weather)<-c("Year","Month","Day","Tmax","Tmin")
sapply(weather,mode) #mode(weather)
weather$Year<-as.numeric(weather$Year)
weather$Month<-as.numeric(weather$Month)
weather$Day<-as.numeric(weather$Day)
weather<-filter(weather,year<1980)
weather<-filter(weather,Year<1980)
weather<-make_all_day_table(weather)
hourtemps<-stack_hourly_temps(weather, latitude=42.5)$hourtemps ## make hourly
hourtemps$DATE<-ISOdate(hourtemps$Year,hourtemps$Month,hourtemps$Day,hourtemps$Hour)
Chill1<-as.data.frame(chilling(hourtemps,Start_JDay=275,End_JDay=367))
View(Chill1)
View(hourtemps)
##how much cold and GDD did they get before bud burst int aht year
?chilling()
##how much cold and GDD did they get before bud burst int aht year
?chilling(4,1,42)
##how much cold and GDD did they get before bud burst int aht year
chilling(4,1,42)
##how much cold and GDD did they get before bud burst int aht year
#How much chilling is at 6 weeks
Tmean<- 4
meandaily<-data.frame(JDay,Year,Tmean)
days<-42 #number of days of climate data
yr<-2018#year of climate data
JDay<-seq(1:days)#DOYs- in January in this case
Year<-rep(yr,length(JDay))
meandaily<-data.frame(JDay,Year,Tmean)
#convert mean daily temperature data to hourly data
hrly.temp =
data.frame(
Temp = c(rep(meandaily$Tmean, times = 24)),
Year = c(rep(meandaily$Year, times = 24)),
JDay = sort(c(rep(seq(1:length(JDay)), times = 24)))
)
View(hrly.temp)
JDay<-seq(1:42)#DOYs- in January in this case
Year<-rep(yr,length(JDay))
meandaily<-data.frame(JDay,Year,Tmean)
#convert mean daily temperature data to hourly data
hrly.temp =
data.frame(
Temp = c(rep(meandaily$Tmean, times = 24)),
Year = c(rep(meandaily$Year, times = 24)),
JDay = sort(c(rep(seq(1:length(JDay)), times = 24)))
)
View(hrly.temp)
##how much cold and GDD did they get before bud burst int aht year
#How much chilling is at 6 weeks
days<-42 #number of days of climate data
yr<-2018#year of climate data
JDay<-seq(1:days)#DOYs- in January in this case
Year<-rep(yr,length(JDay))
#2. Estimate chilling using Tmin and Tmax
#use min and max daily temp to create fake climate data frame for January 2018
Tmin<- 4
Tmax<-4
minmaxdaily<-data.frame(Year,JDay,Tmin,Tmax)
View(minmaxdaily)
#Convert daily tmin and tmax data to hourly data, using packaged functions in chillR
hrly<-make_hourly_temps(lat, minmaxdaily, keep_sunrise_sunset = FALSE)
View(minmaxdaily)
minmaxdaily<-make_all_day_table(minmaxdaily)
hourtemps<-stack_hourly_temps(minmaxdaily, latitude=42.5)$hourtemps ## make hourly
weather<-filter(weather,Year<1980)
weather<-make_all_day_table(weather)
##how much cold and GDD did they get before bud burst int aht year
#How much chilling is at 6 weeks
days<-42 #number of days of climate data
yr<-2018#year of climate data
JDay<-seq(1:days)#DOYs- in January in this case
Year<-rep(yr,length(JDay))
days<-42 #number of days of climate data
yr<-2018#year of climate data
JDay<-seq(1:days)#DOYs- in January in this case
Year<-rep(yr,length(JDay))
lat<-45.5#latitude
#2. Estimate chilling using Tmin and Tmax
#use min and max daily temp to create fake climate data frame for January 2018
Tmin<- 4
Tmax<-4
minmaxdaily<-data.frame(Year,JDay,Tmin,Tmax)
#Convert daily tmin and tmax data to hourly data, using packaged functions in chillR
hrly<-stack_hourly_temps(latitude=lat,make_hourly_temps(lat, minmaxdaily, keep_sunrise_sunset = FALSE))$hourtemps
View(hrly)
#Chilling calculations for lat and time period of interest (January 2018 in my example)
chillcalc <- chilling(hrly, hrly$JDay[1], hrly$JDay[nrow(hrly)])
chillcalc
#1008 Utah 30.35 Cp
###now when historically did we reach that?
weather<-read.csv("..//FLOBUDS/data/hf000-01-daily-m.csv",header = TRUE)
weather<-select(weather,c("date","airtmax","airtmin"))
weather<-separate(weather,date,c("Year","Month","Day"),sep="-",remove=TRUE)
colnames(weather)<-c("Year","Month","Day","Tmax","Tmin")
sapply(weather,mode) #mode(weather)
weather$Year<-as.numeric(weather$Year)
weather$Month<-as.numeric(weather$Month)
weather$Day<-as.numeric(weather$Day)
weather<-filter(weather,year<1980)
weather<-filter(weather,Year<1980)
weather<-make_all_day_table(weather)
hourtemps<-stack_hourly_temps(weather, latitude=42.5)$hourtemps ## make hourly
hourtemps$DATE<-ISOdate(hourtemps$Year,hourtemps$Month,hourtemps$Day,hourtemps$Hour)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,365))
View(ChillHF)
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,31))
mean(ChillHF$Utah_Model)
31+28
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,59))
mean(ChillHF$Utah_Model)
59+31
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,90))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,105))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,100))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,95))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,93))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,94))
mean(ChillHF$Utah_Model)
##how much cold and GDD did they get before bud burst int aht year
ChillHF<-as.data.frame(chilling(hourtemps,Start_JDay=275,95))
mean(ChillHF$Utah_Model)
View(weather)
weatherCC<-weather
weatherCC$Tmin<-weather$Tmin+4
View(weatherCC)
View(weather)
hourtempsCC<-stack_hourly_temps(weatherCC, latitude=42.5)$hourtempsCC ## make hourly
hourtempsCC<-stack_hourly_temps(weatherCC, latitude=42.5)$hourtempsCC ## make hourly
hourtempsCC$DATE<-ISOdate(hourtempsCC$Year,hourtempsCC$Month,hourtempsCC$Day,hourtempsCC$Hour)
View(hourtempsCC)
hourtempsCC<-stack_hourly_temps(weatherCC, latitude=42.5)$hourtempsCC ## make hourly
hourtempsCC<-stack_hourly_temps(weatherCC, latitude=42.5)$hourtemps ## make hourly
hourtempsCC$DATE<-ISOdate(hourtempsCC$Year,hourtempsCC$Month,hourtempsCC$Day,hourtempsCC$Hour)
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,356))
mean(ChillHFCC$Utah_Model)
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,365))
mean(ChillHFCC$Utah_Model)
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,31))
mean(ChillHFCC$Utah_Model)
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,31+28))
mean(ChillHFCC$Utah_Model)
31+28
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,74))
mean(ChillHFCC$Utah_Model)
ChillHFCC<-as.data.frame(chilling(hourtempsCC,Start_JDay=275,69))
mean(ChillHFCC$Utah_Model)
