rm(list=ls())
b=c(3,4,5)
b/3
mean(x=b)
mean(b)
q=(4,5,8,11)
q=(4,5,8,11)
d=(4,5,8,11)
d=(4,5,8,11)
d=4,5,8,11
d=4,5,8
d=(4,5,8)
l=(4,5,8,11)
l=c(4,5,8,11)
sum(l)
rnorm(10)
rnorm(10,mean=1.3, sd=3.4)
x=rnorm(100)
plot(x)
help(rnorm)
example(rnorm)
help(sqrt)
rm(list=ls())
a=rnorm(300, mean = 22, sd=7.6)
plot(a)
a=rnorm(300)
plot(a)
a=rnorm(300)
plot(a)
a=rnorm(300)
plot(a)
mat=matrix(data=c(9,2,3,4,5,6),ncol=3)
mat
60-31
p=seq(from=31, to-60, lenth=29 )
p=seq(from=31, to-60)
p=seq(from=31, to=60)
p
pmat=matrix(data=p,ncol=6,nrow-5)
pmat=matrix(data=p,ncol=6,nrow=5)
pmat
mean(pmat)
pmat(2,)
pmat(2,1)
pmat[2,1]
pmat[2,]
x1=c(rnorm,100)
x2=c(rnorm,100)
x3=c(rnorm,100)
x1
x1=c(rnorm,length=100)
x1
x1=seq(from=0, to=100)
x1
rnorm(x1)
x3=rnorm(100)
x1=rnorm(100)
x2=rnorm(100)
x1=c(x1)
x2=c(x2)
x3=c(x3)
x3
x1=c(x1, length=100)
x1
x1=c(x1)
t=data.frame(a=c(x1),b=c(x2),c=c(x3))
x1=rnorm(100)
x2=rnorm(100)
x3=rnorm(100)
t=data.frame(a=c(x1),b=c(x2),c=c(x3))
t
t=data.frame(a=c(x1),b=c(x1+x2),c=c(x1+x2+x3))
t
plot(t)
sd(t)
data.frame(a=x1,b=(x1=x2),c=(x1+x2+x3))
plot(t)
sd(t)
plot(rnorm=100, type=l, col="red")
plot(rnorm(100), type=l, col="red")
plot(rnorm(100), type="l", col="red")
hist(rnorm)
hist(rnorm(100))
t = data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7))
t
plot(t$a, type="l",ylim=range(t),
lwd=3, col=rgb(1,0,0,0.3))
plot(t$a, type="l",ylim=range(t),lwd=3, col=rgb(1,0,0,0.3))
plot(t$a, type="l",ylim=range(t),lwd=3,col=rgb(1,0,0,0.3))
points(t$c, pch=20, cex=4,6 col=rgb(0,0,1,0.3))
d = data.frame(a = c(3,4,5),b = c(12,43,54))
d
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
> system('clang++ -v')
system('clang++ -v')
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
library("restan")
library("rstan")
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] = mu + tau * eta[j];
}
model {
target += normal_lpdf(eta | 0, 1);
target += normal_lpdf(y | theta, sigma);
}
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
real<lower=0> sigma[J]; // s.e. of effect estimates}
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates}
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
real<lower=0> sigma[J]; // s.e. of effect estimates}
data { int<lower=0> J; // number of schools
library("rstan")
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
data <- list(N = 1000, y = rbinom(1000, 1, 0.7))
bernoulli <- stan("bernoulli.stan", data = data)
bernoulli.stan
60-31
p=seq(from=31, to=60, length=29)
p
rm(p)
p=seq.int(from = 31, to=60, by=1)
p
q=matrix(data=p, ncol=5, nrow=6)
q
x1=c(rnorm(100))
x2=c(rnorm(100))
x3=c(rnorm(100))
t=data.frame(a=x1, b=x1+x2, c=x1+x2=X3)
t=data.frame(a=x1, b=x1+x2, c=x1+x2+X3)
t=data.frame(a=x1, b=x1+x2, c=x1+x2+x3)
plot(t)
x1=seq(rnorm(100))
x2=seq(rnorm(100))
x3=seq(rnorm(100))
t=data.frame(a=x1, b=x1+x2, c=x1+x2+x3)
plot(t)
rnorm(100)
x1=c(rnorm(100))
x2=c(rnorm(100))
x3=c(rnorm(100))
t=data.frame(a=x1, b=x1+x2, c=x1+x2+x3)
plot(t)
sd(t)
x1=(rnorm(100))
x2=(rnorm(100))
x3=(rnorm(100))
x1=(rnorm(100))
x2=(rnorm(100))
x3=(rnorm(100))
t= data.frame(a=c(x1), b=c(x1+x2), c=c(x1+x2+x3))
plot(t)
sd(t)
\usepackage{Library/Frameworks/R.Framework/Resources/Share/texmf/Sweave}
usepackage{Library/Frameworks/R.Framework/Resources/Share/texmf/Sweave}
library(tools)
library(xtable)
options(SweaveSyntax="SweaveSyntaxNoweb")
library(tools)
library(xtable)
options(SweaveSyntax="SweaveSyntaxNoweb")
##DAn B start phylogenies on 1/19/2017
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
##did it work? Let's check
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
### 108 of my species were in the tree. Which species didn't male it
setdiff(namelist,mytree.names)
###Add in the remaining ones
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
##forwhatever reason, 15 species could not be added (8 quercus, 1 ulmus, 1 tilia, sorbus, salix, populus and gymocladus)
mytree.names
#leaves me with 117 for analysis
#seeking phylogenetic signal
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
pruned.by.anthy$node.label<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
??(comparative.data)
??("comparative.data")
help(comparative.data)
anthy$proteranthy[anthy$mich_phen_seq == "pro"] <- 1
anthy$proteranthy[anthy$mich_phen_seq == "pro/syn"] <- 1
anthy$proteranthy[anthy$mich_phen_seq == "syn"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "syn/ser"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "ser"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "hyst"] <- 0
View(anthy)
plot(pruned.by.anthy, show.tip.label=TRUEframe="none", bg="white", adj=-0.5, color="proteranthy")
plot(pruned.by.anthy, show.tip.label=TRUEframe="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=TRUE,frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=TRUE, bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=TRUE, bg="white", adj=0.5)
color.plot.phylo(pruned.by.anthy, anthy, proteranthy)
library(picante)
color.plot.phylo(pruned.by.anthy, anthy, proteranthy)
color.plot.phylo(pruned.by.anthy, anthy, proteranthy,name)
color.plot.phylo(pruned.by.anthy, anthy,anthy$proteranthy,anthy$name)
color.plot.phylo(pruned.by.anthy, anthy,anthy$proteranthy)
color.plot.phylo(pruned.by.anthy, anthy,anthy$proteranthy,anthy$name)
plot(pruned.by.anthy, show.tip.label=TRUE, bg="white", adj=0.5)
color.plot.phylo(pruned.by.anthy,anthy,anthy$proteranthy,anthy$name)
trait.plot(pruned.by.anthy, anthy, proteranty, lab=names(cols), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
install.packages("diversitree")
library(diversitree)
trait.plot(pruned.by.anthy, anthy, cols = proteranthy, lab=names(cols), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
trait.plot(pruned.by.anthy, anthy, cols = mich_phen_seq, lab=names(cols), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
names(cols)
names(proteranthy)
names(anthy$proteranthy)
names(anthy$mich_phen_seq)
names(anthy)
trait.plot(pruned.by.anthy, anthy, cols = anthy$proteranthy, lab=names(anthy$proteranthy), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
anthy<-filter(anthy, proteranthy!=NA)
anthy<-filter(anthy, !is.na(proteranthy))
trait.plot(pruned.by.anthy, anthy, cols = anthy$proteranthy, lab=names(anthy$proteranthy), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
trait.plot(pruned.by.anthy, anthy, cols = anthy$proteranthy=c("blue", "red"), lab=names(anthy$proteranthy), str=0:1, class=NULL,
type="f", w=1/50, legend=length(cols) > 1, cex.lab=.5,
font.lab=3, cex.legend=.75, margin=1/4,
check=TRUE, quiet=FALSE)
trait.plot(pruned.by.anthy, anthy$proteranthy, cols = ("blue", "red"), lab=names(anthy$proteranthy))
trait.plot(pruned.by.anthy, anthy$proteranthy, cols = ("blue" "red"), lab=names(anthy$proteranthy))
trait.plot(pruned.by.anthy, anthy$proteranthy, cols = ("blue", "red"))
trait.plot(pruned.by.anthy, anthy$proteranthy, cols = c("blue", "red"))
trait.plot(pruned.by.anthy, anthy, cols = c("blue", "red"))
head(pruned.by.anthy$tip.state)
phy <- tree.musse.multitrait(anthy$proteranthy, n.trait = 1,
depth = 0, max.taxa = 100, x0 = c(0, 0))
plot(pruned.by.anthy, show.tip.label=TRUE, bg="white", adj=0.5)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=TRUE)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=FALSE)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=FALSE)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
anthy$proteranthy[anthy$mich_phen_seq == "pro"] <- "pro"
anthy$proteranthy[anthy$mich_phen_seq == "pro/syn"] <- "pro"
anthy$proteranthy[anthy$mich_phen_seq == "syn"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "syn/ser"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "ser"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "hyst"] <- "np"
View(anthy)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
library(picante)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
### read in data, format it like Zanne
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
##did it work? Let's check
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
### 108 of my species were in the tree. Which species didn't male it
setdiff(namelist,mytree.names)
###Add in the remaining ones
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
##forwhatever reason, 15 species could not be added (8 quercus, 1 ulmus, 1 tilia, sorbus, salix, populus and gymocladus)
mytree.names
#leaves me with 117 for analysis
#seeking phylogenetic signal
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
pruned.by.anthy$node.label<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
anthy$proteranthy[anthy$mich_phen_seq == "pro"] <- "pro"
anthy$proteranthy[anthy$mich_phen_seq == "pro/syn"] <- "pro"
anthy$proteranthy[anthy$mich_phen_seq == "syn"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "syn/ser"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "ser"] <- "np"
anthy$proteranthy[anthy$mich_phen_seq == "hyst"] <- "np"
View(anthy)
plot(pruned.by.anthy, show.tip.label=FALSE)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=TRUE)
tiplabels(anthy$proteranthy, frame="none", bg="white", adj=-0.5)
tiplabels(thermo = anthy$proteranthy)
help(tiplabels)
plot.phylo(pruned.by.anthy, cex = 0.8, tip.color = tip.color, main = main, ...)
help("plot.phylo")
plot.phylo(pruned.by.anthy)
plot.phylo(signal)
plot.phylo(pruned.by.anthy,show.tip.label = TRUE, tip.color = anthy$proteranthy)
plot.phylo(pruned.by.anthy,show.tip.label = TRUE, tip.color = "blue")
plot.phylo(pruned.by.anthy,show.tip.label = TRUE, tip.color = "blue","red")
##DAn B start phylogenies on 1/19/2017
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
library(picante)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
### read in data, format it like Zanne
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
##did it work? Let's check
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
### 108 of my species were in the tree. Which species didn't male it
setdiff(namelist,mytree.names)
###Add in the remaining ones
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
##forwhatever reason, 15 species could not be added (8 quercus, 1 ulmus, 1 tilia, sorbus, salix, populus and gymocladus)
mytree.names
#leaves me with 117 for analysis
#seeking phylogenetic signal
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
pruned.by.anthy$node.label<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
help(comparative.data)
##############This was troubleshooting an old problem, but it works now###############
#anthy$name
#troubleshoot
#intersect(pruned.by.anthy$node.label,pruned.by.anthy$tip.label)
#name.check(phy = pruned.by.anthy,data = anthy,data.names = anthy$name)
#pruned.by.anthy$node.label<-""
#pruned.by.anthy$tip.label
######################################################################################
#follow ucdavis workflow for discrete traits
anthy$proteranthy[anthy$mich_phen_seq == "pro"] <- 1
anthy$proteranthy[anthy$mich_phen_seq == "pro/syn"] <- 1
anthy$proteranthy[anthy$mich_phen_seq == "syn"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "syn/ser"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "ser"] <- 0
anthy$proteranthy[anthy$mich_phen_seq == "hyst"] <- 0
View(anthy)
plot.phylo(pruned.by.anthy,show.tip.label = TRUE, tip.color = "blue")
trait.plot(pruned.by.anthy,dat =anthy$proteranthy,cols = "default")
trait.plot(pruned.by.anthy,dat = mytree.names)
trait.plot(pruned.by.anthy,dat = mytree.names, cols = anthy$proteranthy)
trait.plot(pruned.by.anthy,d at = anthy, cols = anthy$proteranthy)
trait.plot(pruned.by.anthy,dat = anthy, cols = anthy$proteranthy)
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
View(signal)
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
df<-df(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
