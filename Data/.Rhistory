floers<-summarise(flo_point, avgfl=mean(fopn.jd,na.rm=TRUE), sdfl=sd(fopn.jd, na.rm=TRUE))
floers
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species))
r
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
### read in data, format it like Zanne
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
View(anthy)
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
##did it work? Let's check
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
### 108 of my species were in the tree. Which species didn't male it
setdiff(namelist,mytree.names)
###Add in the remaining ones
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
##forwhatever reason, 15 species could not be added (8 quercus, 1 ulmus, 1 tilia, sorbus, salix, populus and gymocladus)
mytree.names
#leaves me with 117 for analysis
#seeking phylogenetic signal
#error says "Labels duplicated between tips and nodes in phylogeny"
signal<-comparative.data(pruned.by.anthy,anthy,names.col="name")
intersect(pruned.by.anthy$node.label,pruned.by.anthy$tip.label)
name.check(phy = pruned.by.anthy,data = anthy,data.names = anthy$name)
### the names match, not exactly sure what a label is and can seem to find it online
pruned.by.anthy
pruned.by.anthy$node.label
is.na(pruned.by.anthy$node.label)<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col="name")
pruned.by.anthy$node.label
pruned.by.anthy$node.labe[is.na(pruned.by.anthy$node.label)]<-""
pruned.by.anthy$node.labeL[is.na(pruned.by.anthy$node.label)]<-""
pruned.by.anthy$node.labeL
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
### read in data, format it like Zanne
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
View(anthy)
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
plot(pruned.by.anthy)
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
pruned.by.anthy
pruned.by.anthy$node.labeL
pruned.by.anthy$node.label
pruned.by.anthy$node.label[is.na(pruned.by.anthy$node.label)]
pruned.by.anthy$node.label[is.na(pruned.by.anthy$node.label)]
is.na(pruned.by.anthy$node.label)
pruned.by.anthy$node.label=="NA"
pruned.by.anthy$node.label[pruned.by.anthy$node.label=="NA"]<-""
pruned.by.anthy$node.label
signal<-comparative.data(pruned.by.anthy,anthy,names.col="name")
pruned.by.anthy$tip.label
pruned.by.anthy$node.label<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col="name")
signal
anthy
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name)
intersect(pruned.by.anthy$node.label,pruned.by.anthy$tip.label)
anthy$name
pruned.by.anthy$tip.label
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
?comparative.data
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=F)
signal
pruned.by.anthy
plot(pruned.by.anthy)
plot(pruned.by.anthyplot show.tip.label=FALSE)
tiplabels(anthy$mich_phen_seq.excavate, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy,show.tip.label=FALSE)
tiplabels(anthy$mich_phen_seq.excavate, frame="none", bg="white", adj=-0.5)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.5)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.4)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(text, tip, adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "mich_phen_seq", bg = "white", ...)
tiplabels(text, tip, adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = anthy$mich_phen_seq, bg = "white", ...)
tiplabels(adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = anthy$mich_phen_seq, bg = "white")
tiplabels(anthy$mich_phen_seq, adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = anthy$mich_phen_seq, bg = "white")
tiplabels(anthy$mich_phen_seq, adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "anthy$mich_phen_seq", bg = "white")
tiplabels(anthy$mich_phen_seq, adj = c(0.5, 0.5), frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, adj =  0.9, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, adj =  1, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=FALSE)
tiplabels(anthy$mich_phen_seq, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
require(phytools)
x<-getStates(anthy,"tips")
data(anthy)
tree<-pruned.by.anthy
x<-getStates(tree,"tips")
par(fg="transparent")
plotTree(tree,fsize=0.6,ylim=c(-1,length(tree$tip.label)))
lastPP<-get("last_plot.phylo",env=.PlotPhyloEnv)
ss<-sort(unique(x))
colors<-setNames(palette()[1:length(ss)],ss)
par(fg="black")
add.simmap.legend(colors=colors,vertical=FALSE,x=0.25,
y=-1,prompt=FALSE)
colors<-sapply(x,function(x,y) y[which(names(y)==x)],
y=colors)
tt<-gsub("_"," ",tree$tip.label)
text(lastPP$xx[1:length(tt)],lastPP$yy[1:length(tt)],
tt,cex=0.6,col=colors,pos=4,offset=0.1,font=3)
data(signal)
tree<-signal
data(anthy)
tree<-signal
x<-getStates(tree,"tips")
tree<-signal
x<-getStates(tree,"tips")
par(fg="transparent")
plotTree(tree,fsize=0.6,ylim=c(-1,length(tree$tip.label)))
plot(pruned.by.anthy,show.tip.label=FALSE)
tiplabels(anthy$mich_phen_seq, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=FALSE)
tiplabels(anthy$tip.label, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
tiplabels(anthy, adj =  0.5, frame = "none",
pch = NULL, thermo = NULL, pie = NULL, piecol = NULL,
col = "blue", bg = "white")
plot(pruned.by.anthy,show.tip.label=TRUE)
plot(signal,show.tip.label=TRUE)
anthy$mich_phen_seq
dtcolr<-rep("black", length(anthy$mich_phen_seq))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
plot(pruned.by.anthy,show.tip.label=TRUE)
dtcolr<-rep("black", length(anthy$mich_phen_seq))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
plot(pruned.by.anthy,show.tip.label=TRUE, colors="dtcolr")
plot(pruned.by.anthy,show.tip.label=TRUE, colors="dtcolr")
dtcolr<-character(length(pruned.by.anthy$tip.label))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
warnings()
plot(pruned.by.anthy,show.tip.label=TRUE, color="dtcolr")
dtcolr<-character(length(pruned.by.anthy$tip.label))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
dtcolr<-character(length(pruned.by.anthy$tip.label))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
plot(pruned.by.anthy,show.tip.label=TRUE)
dtcolr<-character(length(pruned.by.anthy$tip.label))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
mysorteddata <- anthy[pruned.by.anthye$tip.label
mysorteddata
mysorteddata <- anthy[pruned.by.anthy$tip.label
mysorteddata <- anthy[pruned.by.anthy$tip.label,]
mysorteddata <- anthy[pruned.by.anthy$tip.label,]
mysorteddata
plot(pruned.by.anthy,show.tip.label=TRUE)
dtcolr<-character(length(pruned.by.anthy$tip.label))
dtcolr[anthy$mich_phen_seq=="syn"]<-"orange"
dtcolr[anthy$mich_phen_seq=="pro"]<-"green"
dtcolr[anthy$mich_phen_seq=="ser"]<-"red"
dtcolr[anthy$mich_phen_seq=="pro/syn"]<-"brown"
dtcolr[anthy$mich_phen_seq=="syn/ser"]<-"purple"
dtcolr[anthy$mich_phen_seq=="hyst"]<-"gray40"
signal
##DAn B start phylogenies on 1/19/2017
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
#load packages
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
setwd("~/Documents/git/proterant/input")
###read in tree
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
### read in data, format it like Zanne
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
View(anthy)
###myspecies
namelist<-unique(anthy$name)
namelist
##Prune the tree
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
##did it work? Let's check
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
### 108 of my species were in the tree. Which species didn't male it
setdiff(namelist,mytree.names)
###Add in the remaining ones
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
##forwhatever reason, 15 species could not be added (8 quercus, 1 ulmus, 1 tilia, sorbus, salix, populus and gymocladus)
mytree.names
#leaves me with 117 for analysis
#seeking phylogenetic signal
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
##############This was troubleshooting an old problem, but it works now###############
#anthy$name
#which(anthy$name%in%pruned.by.anthy$tip.label)
#which(pruned.by.anthy$tip.label%in%anthy$name)
#?comparative.data
#troubleshoot
#intersect(pruned.by.anthy$node.label,pruned.by.anthy$tip.label)
#name.check(phy = pruned.by.anthy,data = anthy,data.names = anthy$name)
### the names match, not exactly sure what a label is and can seem to find it online
#pruned.by.anthy$node.label<-""
#pruned.by.anthy$tip.label
######################################################################################
signal
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(stringr)
library(ape)
library(phytools)
library(geiger)
library(randomForest)
library(gbm)
library(pez)
library(dplyr)
library(tidyr)
library(caper)
setwd("~/Documents/git/proterant/input")
treee<-read.tree("Vascular_Plants_rooted.dated.tre")
names.intree<-treee$tip.label
anthy<-read.csv("proterant_ds.csv", header = TRUE)
anthy$name<-paste(anthy$genus,anthy$species,sep="_")
namelist<-unique(anthy$name)
namelist
to.prune<-which(!names.intree%in%namelist)
pruned.by.anthy<-drop.tip(treee,to.prune)
plot(pruned.by.anthy)
mytree.names<-pruned.by.anthy$tip.label
mytree.names
setdiff(namelist,mytree.names)
species<-c("Acer_barbatum","Acer_nigrum","Aesculus_octandra","Carya_aquatica","Carya_illinoiensis","Carya_laciniosa","Celtis_tenuifolia","Fraxinus_pensylvanica","Gymnocladus_dioicus","Malus_coronaria","Populus_heterophylla","Prunus_nigra","Quercus_prinoides","Quercus_coccinea","Quercus_ellipsoidalis","Quercus_douglasii","Quercus_muehlenbergii","Quercus_nuttallii","Quercus_phellos","Quercus_prinus","Salix_nigra","Sorbus_americana","Tilia_heterophylla","Ulmus_thomasii")
for(i in 1:length(species)) pruned.by.anthy<-add.species.to.genus(pruned.by.anthy,species[i],where="random")
plotTree(pruned.by.anthy,ftype="i")
mytree.names<-pruned.by.anthy$tip.label
setdiff(namelist,mytree.names)
mytree.names
which(anthy$name%in%pruned.by.anthy$tip.label)
which(pruned.by.anthy$tip.label%in%anthy$name)
pruned.by.anthy$node.label<-""
signal<-comparative.data(pruned.by.anthy,anthy,names.col=name,na.omit=FALSE)
signal
plot(signal)
plot(pruned.by.anthy, show.tip.label=FALSE)
scrapecolour<-character(length(pruned.by.anthy$tip.label))#creates a vector with the same length as the tip labels in the tree
scrapecolour[signal$scrape.excavate=="syn"]<-"green"
plot(pruned.by.anthy, show.tip.label=FALSE)
scrapecolour<-character(length(pruned.by.anthy$tip.label))#creates a vector with the same length as the tip labels in the tree
scrapecolour[signal$mich_phen_seq=="syn"]<-"green"
plot(pruned.by.anthy, show.tip.label=TRUE)
scrapecolour<-character(length(pruned.by.anthy$tip.label))#creates a vector with the same length as the tip labels in the tree
scrapecolour[signal$mich_phen_seq=="syn"]<-"green"# then populates each element in the vector with a colour depending on character state in scrape
scrapecolour<-character(length(pruned.by.anthy$tip.label))#creates a vector with the same length as the tip labels in the tree
scrapecolour[signal$mich_phen_seq==syn]<-"green"
plot(pruned.by.anthy, show.tip.label=TRUE, color="scrapecolour")
######################################################################################
plot(pruned.by.anthy, show.tip.label=TRUE, col="scrapecolour")
plot(pruned.by.anthy, show.tip.label=TRUE, col="scrapecolour")
scrapecolour<-character(length(pruned.by.anthy$tip.label))#creates a vector with the same length as the tip labels in the tree
scrapecolour[signal$mich_phen_seq==syn]<-"green"# then populates each element in the vector with a colour depending on character state in scrape
plot(pruned.by.anthy, show.tip.label=TRUE, col="scrapecolour")
plot(pruned.by.anthy, show.tip.label=TRUE, col="blue")
plot(pruned.by.anthy, show.tip.label=FALSE)
tiplabels(signal$mich_phen_seq, frame="none", bg="white", adj=-0.5)
plot(pruned.by.anthy, show.tip.label=FALSE)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.5)
mysorteddata <- signal[pruned.by.anthy$tip.label, ]
mysortdata
mysorteddata
plot(pruned.by.anthy, show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.5)
mysorteddata <- anthy[pruned.by.anthy$tip.label, ]
mysorteddata
plot(pruned.by.anthy, show.tip.label=TRUE)
tiplabels(anthy$mich_phen_seq, frame="none", bg="white", adj=-0.5)
signal
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(plotrix)
library(gdata)
library(nlme)
library(scales)
library(arm)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("~/Documents/git/proterant/Data")
hf<-read.csv("hf003-05-mean-ind.csv",header=TRUE)
###plot the budburst data###
new<-rename(hf,lbb.jd=bb.jd)
head(new)
new<-dplyr::select(new,-l75.jd)
head(new)
new<-gather(new,phenophase,eventday,lbb.jd:fbb.jd)
###Filter out species with insufficient flowering records
new<-filter(new, species %in% c( "ACPE","ACRU", "AMSP","BEAL","BEPA",
"BEPO","COAL","FRAM","ILVE","KAAN","KALA","LYLI","NEMU",
"POTR","QURU","QUVE","RHSP","SAPU","VACO","VIAL"))
q<-ggplot(new, aes(x=year, y=eventday, color=phenophase)) +
stat_summary()+labs(title="Flower and Leaf Budburst at Harvard Forest", x="Year", y="Days since initiation")
q+facet_wrap(~species)
##Now plot flowers open vs. l75
new2<-dplyr::select(hf,-fbb.jd)
head(new2)
new2<-gather(new2,phenophase,eventday,l75.jd:fopn.jd)
###Filter out species with insufficient flowering records
new2<-filter(new2, species %in% c( "ACPE","ACRU", "AMSP","BEAL","BEPA",
"BEPO","COAL","FRAM","ILVE","KAAN","KALA","LYLI","NEMU",
"POTR","QURU","QUVE","RHSP","SAPU","VACO","VIAL"))
q<-ggplot(new2, aes(x=year, y=eventday, color=phenophase)) +
stat_summary()+labs(title="Flowering and Leaf Expansion at Harvard Forest", x="Year", y="Days since initiation")
q+facet_wrap(~species)
###Now, how many fopn, before lbb.
new3<-rename(hf,lbb.jd=bb.jd)
head(new3)
new3<-dplyr::select(new3,-l75.jd)
new3<-dplyr::select(new3,-fbb.jd)
new3<-gather(new3,phenophase,eventday,lbb.jd:fopn.jd)
new3<-filter(new3, species %in% c( "ACPE","ACRU", "AMSP","BEAL","BEPA",
"BEPO","COAL","FRAM","ILVE","KAAN","KALA","LYLI","NEMU",
"POTR","QURU","QUVE","RHSP","SAPU","VACO","VIAL"))
q<-ggplot(new3, aes(x=year, y=eventday, color=phenophase)) +
stat_summary()+labs(title="Open Flowers and Leaf Budbust", x="Year", y="Days since initiation")
q+facet_wrap(~species)
View(hf)
### now try to make an anual mean leaf out value
mean<-read.csv("hf003-06-mean-spp.csv",header=TRUE)
head(mean)
mean<-rename(mean,lbb.jd=bb.jd)
head(mean)
#reduced_mean<-gather(mean,phenophase,eventday,lbb.jd:fopn.jd)
reduced_mean<-filter(mean, species %in% c( "ACPE","ACRU", "AMSP","BEAL","BEPA",
"BEPO","COAL","FRAM","ILVE","KAAN","KALA","LYLI","NEMU",
"POTR","QURU","QUVE","RHSP","SAPU","VACO","VIAL"))
head(reduced_mean)
reduced_mean<-group_by(reduced_mean, year)
leafout<-summarise(reduced_mean, avgleaf=mean(l75.jd,na.rm=TRUE), sdleaf=sd(l75.jd, na.rm=TRUE))
leafout
q<-ggplot(leafout, aes(x=year, y=avg,)) +geom_line(aes(x=year, y=avg))
flo_point<-group_by(reduced_mean,year, species)
floers<-summarise(flo_point, avgfl=mean(fopn.jd,na.rm=TRUE), sdfl=sd(fopn.jd, na.rm=TRUE))
floers
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species))
r
q
q<-ggplot(leafout, aes(x=year, y=avgleaf,)) +geom_line(aes(x=year, y=avgleaf))
q
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species)) + geom_line(data = leafout, aes(x=year, y=meanleaf, colour="#000099"),
show_guide = FALSE)
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species)) + geom_line(data = leafout, aes(x=year, y=meanleaf, colour="#000099"),
show_legend = TRUE)
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species)) + geom_line(data = leafout, aes(x=year, y=meanleaf, colour="#000099"))
r
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species)) + geom_line(data = leafout, aes(x=year, y=avgleaf, colour="#000099"))
r
r<-ggplot(floers, aes(x=year, y=avgfl,)) +geom_point(aes(x=year, y=avgfl,color=species)) + geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r
r<-ggplot(floers, aes(x=year, y=avgfl, color=species)) +stat_summary()
+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl, color=species)) +stat_summary()+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r
r<-ggplot(floers, aes(x=year, y=avgfl, color=species)) +stat_summary()+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r
r<-ggplot(reduced_mean, aes(x=year, y=fopn.jd, color=species)) +stat_summary()+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r
head(reduced_mean)
r<-ggplot(floers, aes(x=year, y=avgfl, color=species)) +stat_summary()
+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl, color=species)) +geom_pointrange(aes(x=year, y=avgfl,color=species))
+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))
+ geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
r
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
+geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf+sdleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))
+geom_line(data = leafout, aes(x=year, y=avgleaf+sdleaf, colour="Average Leafout"))
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))+geom_line(data = leafout, aes(x=year, y=avgleaf+sdleaf, colour="Average Leafout"))
r
r<-ggplot(floers, aes(x=year, y=avgfl)) +geom_point(aes(x=year, y=avgfl,color=species))+geom_line(data = leafout, aes(x=year, y=avgleaf, colour="Average Leafout"))+geom_line(data = leafout, aes(x=year, y=avgleaf+sdleaf, colour="sd leafout"))+geom_line(data = leafout, aes(x=year, y=avgleaf-sdleaf, colour="sd leafout"))
r
