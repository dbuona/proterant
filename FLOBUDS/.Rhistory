Z$class<-ifelse(Z$predictor=="LightS",0,Z$class)
Z$class<-ifelse(Z$predictor=="Chill:Leaf",1,Z$class)
Z$class<-ifelse(Z$predictor=="Chill:Flo",1,Z$class)
Z$class<-ifelse(Z$predictor=="Chill",1,Z$class)
Z$class<-ifelse(Z$predictor=="Force:Leaf",3,Z$class)
Z$class<-ifelse(Z$predictor=="Force:Flo",3,Z$class)
Z$class<-ifelse(Z$predictor=="Force",3,Z$class)
#plot this model
Q<-as.data.frame(coef(mod.fe))
colnames(Q)
R<-dplyr::select(Q,contains("Estimate"))
R<-rownames_to_column(R,"GEN.SPA")
colnames(R)
R<-dplyr::select(R,-GEN.SPA.Estimate.Intercept)
colnames(R)<-c("GEN.SPA","Intercept","Phase","Light:Flo","Light:Leaf","Chill:Flo","Chill:Leaf","Force:Flo","Force:Leaf","LightS","Chill","Force")
colnames(R)
#plot this model
Q<-as.data.frame(coef(mod.fe))
colnames(Q)
R<-dplyr::select(Q,contains("Estimate"))
R<-rownames_to_column(R,"GEN.SPA")
#R<-dplyr::select(R,-GEN.SPA.Estimate.Intercept)
colnames(R)<-c("GEN.SPA","Intercept","Phase","Light:Flo","Light:Leaf","Chill:Flo","Chill:Leaf","Force:Flo","Force:Leaf","LightS","Chill","Force")
summary(mod.fe)
ggplot(Z2,aes(effect,predictor))+geom_point(aes(color=as.character(class)))+geom_errorbarh(aes(color=as.character(class),xmin=(CIlow), xmax=(CIhigh)), position=pd, size=.5, height =0, width=0)+geom_vline(aes(xintercept=0))+ggtitle("Model M1b")+facet_wrap(~GEN.SPA)
coef(mod.fe)
d.flo<-filter(d,phase=="flo_day")
d.leaf<-filter(d,phase=="leaf_day")
#####flower and leaves seperately
prior<-get_prior(DOY | cens(surv) ~ photoperiod+chilldays+temp_day,
data = d.flo, family = weibull)
mod.flo<- brm(DOY | cens(surv) ~ photoperiod+chilldays+temp_day+(1+photoperiod+chilldays+temp_day|GEN.SPA),
fds
)
mod.flo<- brm(DOY | cens(surv) ~ photoperiod+chilldays+temp_day+(1+photoperiod+chilldays+temp_day|GEN.SPA),
data = d.flo, family = weibull,inits = "0",
iter= 3000,
warmup = 2000,
prior = prior)
summary(mod.flo)
coef(mod.flo)
prior<-get_prior(DOY | cens(surv) ~ photoperiod+chilldays+temp_day,
data = d.leaf, family = weibull)
mod.leaf<- brm(DOY | cens(surv) ~ photoperiod+chilldays+temp_day+(1+photoperiod+chilldays+temp_day|GEN.SPA),
data = d.leaf, family = weibull,inits = "0",
iter= 3000,
warmup = 2000,
prior = prior)
coef(mod.leaf)
L<-as.data.frame(coef(mod.leaf))
Fl<-as.data.frame(coef(mod.flo))
L$class<-"leafout"
Fl$class<-"flowering"
output<-cbind(L,Fl)
View(output)
output<-rbind(L,Fl)
View(output)
View(output)
output<-gather(output,2:20)
View(output)
output<-rbind(L,Fl)
output<-rownames_to_column(output,"GEN.SPA")
View(output)
output<-rbind(L,Fl)
estimate<-filter(output, contains("Estimate")
estimate<-filter(output, contains("Estimate"))
estimate<-filter(output, contains("Estimate"))
View(output)
estimate<-filter(output, contains(".Estimate."))
estimate<-filter(output, contains("Q2.5"))
estimate<-dplyr::select(output, contains("Estimate"))
View(estimate)
estimate<-gather(estimate,"estimate","predictor",1:4)
View(estimate)
estimate<-dplyr::select(output, contains("Estimate"))
estimate<-gather(estimate,,"predictor","estimate",1:4)
output<-rownames_to_column(output,"GEN.SPA")
estimate<-dplyr::select(output, contains("Estimate"))
estimate<-gather(estimate,,"predictor","estimate",1:4)
estimate<-gather(estimate,"predictor","estimate",1:4)
output<-rownames_to_column(output,"GEN.SPA")
estimate<-dplyr::select(output, contains("Estimate"))
estimate<-gather(estimate,"predictor","estimate",1:4)
output<-rbind(L,Fl)
estimate<-dplyr::select(output, contains("Estimate"))
estimate<-gather(estimate,"predictor","estimate",1:4)
output<-rbind(L,Fl)
output<-rownames_to_column(output,"GEN.SPA")
estimate<-dplyr::select(output, contains("Estimate"))
output<-rbind(L,Fl)
estimate<-dplyr::select(output, contains("Estimate"))
estimate<-rownames_to_column(estimate,"GEN.SPA")
estimate<-gather(estimate,"predictor","estimate",2:5)
###low
low<-dplyr::select(output, contains("Q2.5"))
low<-rownames_to_column(low,"GEN.SPA")
low<-gather(estimate,"predictor","low",2:5)
View(low)
low<-gather(low,"predictor","low",2:5)
high<-dplyr::select(output, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
high<-gather(high,"predictor","high",2:5)
View(high)
output<-rbind(L,Fl)
estimate<-dplyr::select(output, contains(c("Estimate","class"))
estimate<-dplyr::select(output, contains(c("Estimate","class")))
estimate<-dplyr::select(output, contains(c("Estimate","class")))
estimate<-dplyr::select(output, contains(c("Estimate","class"))
estimate<-dplyr::select(output, contains(c("Estimate","class")))
estimate<-dplyr::select(output, contains(c("Estimate","class")))
estimate<-dplyr::select(output, contains(c("Estimate"))
output<-rbind(L,Fl)
output<-rbind(L,Fl)
View(output)
estimate<-dplyr::select(output, contains(c("Estimate"))
estimate<-gather(estimate,"predictor","estimate",2:5)
###low
low<-dplyr::select(output, contains("Q2.5"))
low<-rownames_to_column(low,"GEN.SPA")
low<-gather(low,"predictor","low",2:5)
high<-dplyr::select(output, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
high<-gather(high,"predictor","high",2:5)
out<-rbind(high,low,estimate)
out<-cbind(high,low,estimate)
View(out)
out<-rbind(high,low,estimate)
colnames(estimate)
colnames(high)
out<-left_join(high,low,estimate)
View(out)
out<-left_join(high,low,estimate,by"predictor")
out<-left_join(high,low,estimate,by="predictor")
View(out)
output<-rbind(L,Fl)
View(output)
View(output)
L<-as.data.frame(coef(mod.leaf))
Fl<-as.data.frame(coef(mod.flo))
L$class<-"leafout"
Fl$class<-"flowering"
View(L)
launch_shinystan(mod.leaf)
plot(mod.leaf)
summary(mod.leaf)
summary(mod.flo)
summary(mod.leaf)
summary(mod.flo)
L$class<-"leafout"
Fl$class<-"flowering"
View(L)
estimate<-dplyr::select(L, contains(c("Estimate"))
estimate<-dplyr::select(L, contains(c("Estimate"))
estimate<-rownames_to_column(L,"GEN.SPA"))
estimate<-dplyr::select(L, contains(c("Estimate"))
estimate<-rownames_to_column(L,"GEN.SPA"))
estimate<-dplyr::select(L, contains(c("Estimate"))
estimate<-rownames_to_column(L,"GEN.SPA"))
estimate<-dplyr::select(L, contains(c("Estimate")
estimate<-rownames_to_column(L,"GEN.SPA"))
estimate<-gather(L,"predictor","estimate",2:4))
estimate<-dplyr::select(L, contains("Estimate")
estimate<-rownames_to_column(L,"GEN.SPA"))
estimate<-dplyr::select(L, contains("Estimate"))
estimate<-rownames_to_column(L,"GEN.SPA")
estimate<-dplyr::select(L, contains("Estimate"))
View(estimate)
estimate<-rownames_to_column(L,"GEN.SPA")
estimate<-gather(L,"predictor","estimate",2:4)
View(estimate)
leaf<-dplyr::select(L, contains("Estimate"))
leaf<-rownames_to_column(leaf,"GEN.SPA")
leaf<-gather(leaf,"predictor","estimate",2:4)
View(leaf)
leaf<-dplyr::select(L, contains("Estimate"))
leaf<-rownames_to_column(leaf,"GEN.SPA")
leaf<-gather(leaf,"predictor","estimate",2:5)
View(leaf)
leaf<-dplyr::select(L, contains("Estimate"))
leaf<-rownames_to_column(leaf,"GEN.SPA")
colnames(leaf)<-c("GEN.SPA","Intercept","photo","chill","force")
leaf<-gather(leaf,"predictor","estimate",2:5)
colnames(leaf)<-c("GEN.SPA","Intercept","photo","chill","force")
###low
low<-dplyr::select(L, contains("Q2.5"))
low<-rownames_to_column(low,"GEN.SPA")
View(low)
colnames(leaf)<-c("GEN.SPA","Intercept","photo","chill","force")
colnames(low)<-c("GEN.SPA","Intercept","photo","chill","force")
low<-gather(low,"predictor","low",2:5)
View(low)
high<-dplyr::select(L, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
high<-gather(high,"predictor","high",2:5)
lef_join(leaf,low)
left_join(leaf,low)
X<-left_join(leaf,low)
XX<-left_join(X,high)
View(XX)
high<-dplyr::select(L, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
high<-gather(high,"predictor","high",2:5)
X<-left_join(leaf,low)
XX<-left_join(X,high)
View(XX)
high<-dplyr::select(L, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
high<-gather(high,"predictor","high",2:5)
high<-dplyr::select(L, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
colnames(high)<-c("GEN.SPA","Intercept","photo","chill","force")
high<-gather(high,"predictor","high",2:5)
X<-left_join(leaf,low)
XX<-left_join(X,high)
View(XX)
XX$class<-"leaf"
###flower output
flower<-dplyr::select(F, contains("Estimate"))
###flower output
flower<-dplyr::select(Fl, contains("Estimate"))
flower<-rownames_to_column(flower,"GEN.SPA")
colnames(flower)<-c("GEN.SPA","Intercept","photo","chill","force")
flower<-gather(flower,"predictor","estimate",2:5)
low<-dplyr::select(Fl, contains("Q2.5"))
low<-rownames_to_column(low,"GEN.SPA")
colnames(low)<-c("GEN.SPA","Intercept","photo","chill","force")
low<-gather(low,"predictor","low",2:5)
high<-dplyr::select(Fl, contains("Q97.5"))
high<-rownames_to_column(high,"GEN.SPA")
colnames(high)<-c("GEN.SPA","Intercept","photo","chill","force")
high<-gather(high,"predictor","high",2:5)
Y<-left_join(Fl,low)
Y<-left_join(flower,low)
YY<-left_join(Y,high)
YY$class<-"flower"
View(XX)
plotdat<-cbind(YY,XX)
View(plotdat)
plotdat<-rbind(YY,XX)
View(plotdat)
ggplot(plotdat,aes(predictor,estimate))+geom_point(aes(color=class))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+facet_wrap(~GEN.SPA)
plotdat<-filter(plotdat,predictor!="intercept")
View(plotdat)
plotdat<-filter(plotdat,predictor!="Intercept")
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+facet_wrap(~GEN.SPA)
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+facet_wrap(~GEN.SPA)+geom_vline(x=0)
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(R, aes(effect,predictor))+geom_point()+geom_vline(aes(xintercept=0,color="red"))+geom_errorbarh(aes(,xmin=(low), xmax=(high))+facet_wrap(~GEN.SPA)
ggplot(R, aes(effect,predictor))+geom_point()+geom_vline(aes(xintercept=0,color="red"))+geom_errorbarh(aes(,xmin=(low), xmax=(high)))+facet_wrap(~GEN.SPA)
ggplot(R, aes(effect,predictor))+geom_point()+geom_vline(aes(xintercept=0,color="red"))+geom_errorbarh(aes(,xmin=(low), xmax=(high)))+facet_wrap(~GEN.SPA)
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(,xmin=(low), xmax=(high))+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(,xmin=(low), xmax=(high)))+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(,xmin=(low), xmax=(high)))+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(,xmin=(low), xmax=(high)),color=class)+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(xmin=(low), xmax=(high)),color=class)+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
ggplot(plotdat,aes(estimate,predictor))+geom_point(aes(color=class))+geom_errorbarh(aes(xmin=(low), xmax=(high),color=class))+facet_wrap(~GEN.SPA)+geom_vline(aes(xintercept=0))
library(devtools)
install_github("daniel-gerhard/standrc")
data(spinach)
head(spinach)
library(drc)
data(spinach)
head(spinach)
m <- standrm(SLOPE ~ DOSE, data=spinach,
fct=LL.5(fixed=c(NA, NA, NA, NA, 0)),
curveid=b + c + e ~ HERBICIDE,
random=c + e ~ CURVE,
iter=3000, chains=4)
m <- standrc::standrm(SLOPE ~ DOSE, data=spinach,
fct=LL.5(fixed=c(NA, NA, NA, NA, 0)),
curveid=b + c + e ~ HERBICIDE,
random=c + e ~ CURVE,
iter=3000, chains=4)
library(standrc)
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(devtools)
library(drc)
install_github("daniel-gerhard/standrc")
data(spinach)
head(spinach)
librar(standrc)
library(standrc)
install_github("daniel-gerhard/standrc")
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(ggplot2)
library(tidyverse)
library(brms)
library(rstan)
library(arm)
library(rstanarm)
library(tibble)
library(ggstance)
setwd("~/Documents/git/proterant/FLOBUDS")
d<-read.csv("dicogamy.csv",header=TRUE)
d<-unite(d,treatment,Force,Light,Chill,sep="",remove=FALSE)
d$Light<-ifelse(d$Light=="L","xL","S")
###name treatments numeric/continuous
d$photoperiod<-ifelse(d$Light=="xL",12,8)
d$temp_day<-ifelse(d$Force=="W",24,18)
d$temp_night<-ifelse(d$Force=="W",18,12)
d$chilldays<-ifelse(d$Chill==0,28,56)
###center predictors
d$p_cent<-d$photoperiod/mean(d$photoperiod)
d$f_cent<-d$temp_day/mean(d$temp_day)
d$c_cent<-d$chilldays/mean(d$chilldays)
d$p.z<-d$photoperiod-mean(d$photoperiod)/sd(d$photoperiod)
d$f.z<-d$temp_day-mean(d$temp_day)/sd(d$temp_day)
d$c.z<-d$chilldays-mean(d$chilldays)/sd(d$chilldays)
d$leaflike<-ifelse(is.na(d$leaf_day),0,1)
d$gynlike<-ifelse(is.na(d$flo_dayF),0,1)
d$anthlike<-ifelse(is.na(d$flo_dayM),0,1)
View(d)
d$leaflike<-ifelse(is.na(d$leaf_day),0,1)
d$leaflike<-ifelse(is.na(d$leaf_day),0,1)
d$leaflike<-ifelse(is.na(d$leaf_day),0,1)
d$leaflike<-ifelse(is.na(d$leaf_day),0,1)
d$gynlike<-ifelse(is.na(d$flo_dayF),0,1)
d$anthlike<-ifelse(is.na(d$flo_dayM),0,1)
View(d)
goo<- d %>% group_by(treatment) %>% summarise(mean.gyn=mean(flo_dayF))
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF))
goo
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF,na.rm=FALSE))
goo
View(goo)
View(goo)
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF,na.rm=TRUE)
goo
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF,na.rm=TRUE))
goo
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF,na.rm=FALSE))
goo
goo<- d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.gyn=mean(flo_dayF,na.rm=TRUE))
goo
goo2<-d %>% group_by(GEN.SPA,treatment) %>% summarise(mean.anth=mean(flo_dayM,na.rm=TRUE))
goo2
googoo<-left_join(goo,goo2)
googoo
googoo$dichog<-googoo$mean.gyn-googoo$mean.anth
googoo$dichog
View(googoo)
##Ask Lizzie about the chilling.
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(dplyr)
library(brms)
library(chillR)
library(dplyr)
library(tidyr)
library(tibble)
library(ggstance)
library(ggthemes)
library(grid)
setwd("~/Documents/git/proterant/FLOBUDS")
db.dat<-read.csv("Flo_buds_for_thermoperiodicity.csv")
df.dat<-read.csv("input/Budburst By Day.csv")
df.dat.HF<-filter(df.dat,site=="HF") ##filter to only HF species
n <- 4
df.dat.HF$GEN.SPA<-paste(substr(df.dat.HF$sp, 1, n-1), ".", substr(df.dat.HF$sp, n, nchar(df.dat.HF$sp)), sep = "") ## make a column for GEN.SA
df.dat.HF<-filter(df.dat.HF,chill=="chill0")### select only DF's no chill treatment assume there was field chillint
db.dat$photoperiod<-ifelse(db.dat$Light=="L",12,8)
db.dat$temp_day<-ifelse(db.dat$Force=="W",24,18)
db.dat$temp_night<-ifelse(db.dat$Force=="W",18,12)
db.dat$chilldays<-ifelse(db.dat$Chill==0,28,56)
matching_sps<-intersect(unique(df.dat.HF$GEN.SPA),unique(db.dat$GEN.SPA)) ## could also add viburnum and vaccinium at the genus level
df.dat.match<-df.dat.HF #These inculde all species
db.dat.match<-db.dat
db.dat.match<-unite(db.dat.match, treatcode, 4:6,sep="")
db.dat.match$Chill<-ifelse(db.dat.match$chilldays==28,0,1)
db.dat.match$FORCE<-ifelse(db.dat.match$temp_day==24,1,0) ### new column where forcing temperature are binary low or high
df.dat.match$FORCE<-ifelse(df.dat.match$warm==20,1,0)
##Ask Lizzie about the chilling.
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(dplyr)
library(brms)
library(chillR)
library(dplyr)
library(tidyr)
library(tibble)
library(ggstance)
library(ggthemes)
library(grid)
setwd("~/Documents/git/proterant/FLOBUDS")
db.dat<-read.csv("Flo_buds_for_thermoperiodicity.csv")
db.dat<-read.csv("/periodicity/Flo_buds_for_thermoperiodicity.csv")
db.dat<-read.csv("periodicity/Flo_buds_for_thermoperiodicity.csv")
df.dat<-read.csv("input/Budburst By Day.csv")
df.dat.HF<-filter(df.dat,site=="HF") ##filter to only HF species
n <- 4
df.dat.HF$GEN.SPA<-paste(substr(df.dat.HF$sp, 1, n-1), ".", substr(df.dat.HF$sp, n, nchar(df.dat.HF$sp)), sep = "") ## make a column for GEN.SA
df.dat.HF<-filter(df.dat.HF,chill=="chill0")### select only DF's no chill treatment assume there was field chillint
db.dat$photoperiod<-ifelse(db.dat$Light=="L",12,8)
db.dat$temp_day<-ifelse(db.dat$Force=="W",24,18)
db.dat$temp_night<-ifelse(db.dat$Force=="W",18,12)
db.dat$chilldays<-ifelse(db.dat$Chill==0,28,56)
matching_sps<-intersect(unique(df.dat.HF$GEN.SPA),unique(db.dat$GEN.SPA)) ## could also add viburnum and vaccinium at the genus level
df.dat.match<-df.dat.HF #These inculde all species
db.dat.match<-db.dat
db.dat.match<-unite(db.dat.match, treatcode, 4:6,sep="")
db.dat.match$Chill<-ifelse(db.dat.match$chilldays==28,0,1)
db.dat.match$FORCE<-ifelse(db.dat.match$temp_day==24,1,0) ### new column where forcing temperature are binary low or high
df.dat.match$FORCE<-ifelse(df.dat.match$warm==20,1,0)
db.dat.match$study<-"DB"
df.dat.match$study<-"DF"
##subset to columns of use
db.dat.match<-dplyr::select(db.dat.match,GEN.SPA,F60,LBB,L11,treatcode,temp_day,photoperiod,Chill,study,FORCE)
df.dat.match<-dplyr::select(df.dat.match,GEN.SPA,fday,bday,lday,treatcode,warm,photo,chill,study,FORCE)
###make columns the same
colnames(db.dat.match)[colnames(db.dat.match)=="F60" ] <- "fday"
colnames(db.dat.match)[colnames(db.dat.match)=="L11" ] <- "lday"
colnames(db.dat.match)[colnames(db.dat.match)=="LBB" ] <- "bday"
colnames(db.dat.match)[colnames(db.dat.match)=="temp_day" ] <- "warm"
colnames(db.dat.match)[colnames(db.dat.match)=="photoperiod" ] <- "photo"
colnames(db.dat.match)[colnames(db.dat.match)=="Chill" ] <- "chill"
colnames(db.dat.match)
colnames(df.dat.match)
unique(db.dat.match$chill)
both.dat1<-rbind(df.dat.match,db.dat.match) ### since dan F was in he middle of mine, I am going to use both of my chilling
both.dat1$PHOTO<-ifelse(both.dat1$photo==8,0,1)
both.dat1$warm.cent<-both.dat1$warm-mean(both.dat1$warm)
both.dat1$photo.cent<-both.dat1$photo-mean(both.dat1$photo)
#both.dat.sameforce2<-both.dat2 %>% filter(warm %in% c(20,18))# This make a data sheet where the average forcing in both experiments was 15 C (DB low, DF high)
both.dat.sameforce1<-both.dat1 %>% filter(warm %in% c(20,18)) ## Filter just the studies with same forcing
photo.only.bb1<-brm(bday~study*PHOTO+(study*PHOTO|GEN.SPA),data=both.dat.sameforce1,iter=3000,warmup=2500)
summary(photo.only.bb1)
coef(photo.only.bb1)
bb.output<-rownames_to_column(as.data.frame(fixef(photo.only.bb1,probs=c(0.1,0.9,0.25,0.75))),"Parameter")
#bb.output<-bb.output %>% filter(Parameter %in% c("PHOTO","studyDF:PHOTO"))
bb.output$Phase<-"budburst"
pd2=position_dodgev(height=0.4)
ggplot(bb.output,aes(Estimate,Parameter))+geom_point(position=pd2)+geom_errorbarh(aes(xmin=Q25,xmax=Q75),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90),linetype="dotted",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="red")+ggtitle("Budburst comparison")
###compare_periodicity begun by Dan B. on Feb 7 2019
#The goal of this file is to compare the effect of covarying photoperiodicity and thermoperiodcity by comparing dany flynn to Dan b's budburst experients
##Ask Lizzie about the chilling.
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(dplyr)
library(brms)
library(chillR)
library(dplyr)
library(tidyr)
library(tibble)
library(ggstance)
library(ggthemes)
library(grid)
setwd("~/Documents/git/proterant/FLOBUDS")
load("periodicity/periodicity_mods.RData")
plotyxx<-ggplot(veggie2,aes(Estimate,Parameter))+geom_point(aes(color=Phase,shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgrey","black"))+xlim(-50,80)
plotyyy<-ggplot(veggie.effect2,aes(Estimate,Parameter))+geom_point(aes(color=Phase, shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgray","black"))+xlim(-14,14)+theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
plotyx<-ggplot(veggie,aes(Estimate,Parameter))+geom_point(aes(color=Phase,shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgrey","black"))
plotyy<-ggplot(veggie.effect,aes(Estimate,Parameter))+geom_point(aes(color=Phase, shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgray","black"))+xlim(-10,10)+theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
jpeg("Plots/photothermo_allsps.jpeg",width = 1020, height = 529)
vp <- viewport(width = 0.4, height = 0.5, x = 0.2, y = .99,just=c("left","top"))
plotyx+theme_base()
print(plotyy, vp = vp, )
dev.off()
plotyx
plotyy
df.dat.match<-df.dat.HF %>%filter(GEN.SPA %in% c(matching_sps))  ### make both dataset noly consiston matching sps
db.dat.match<-db.dat %>%filter(GEN.SPA %in% c(matching_sps))
db.dat.match<-unite(db.dat.match, treatcode, 4:6,sep="")
db.dat.match$Chill<-ifelse(db.dat.match$chilldays==28,0,1)
db.dat.match$FORCE<-ifelse(db.dat.match$temp_day==24,1,0) ### new column where forcing temperature are binary low or high
df.dat.match$FORCE<-ifelse(df.dat.match$warm==20,1,0)
db.dat.match$study<-"DB"
df.dat.match$study<-"DF"
##subset to columns of use
db.dat.match<-dplyr::select(db.dat.match,GEN.SPA,F60,LBB,L11,treatcode,temp_day,photoperiod,Chill,study,FORCE)
df.dat.match<-dplyr::select(df.dat.match,GEN.SPA,fday,bday,lday,treatcode,warm,photo,chill,study,FORCE)
###make columns the same
colnames(db.dat.match)[colnames(db.dat.match)=="F60" ] <- "fday"
colnames(db.dat.match)[colnames(db.dat.match)=="L11" ] <- "lday"
colnames(db.dat.match)[colnames(db.dat.match)=="LBB" ] <- "bday"
colnames(db.dat.match)[colnames(db.dat.match)=="temp_day" ] <- "warm"
colnames(db.dat.match)[colnames(db.dat.match)=="photoperiod" ] <- "photo"
colnames(db.dat.match)[colnames(db.dat.match)=="Chill" ] <- "chill"
colnames(db.dat.match)
colnames(df.dat.match)
unique(db.dat.match$chill)
both.dat.match<-rbind(df.dat.match,db.dat.match) ### since dan F was in he middle of mine, I am going to use both of my chilling
both.dat.match$PHOTO<-ifelse(both.dat.match$photo==8,0,1)
both.dat.match$warm.cent<-both.dat.match$warm-mean(both.dat.match$warm)
both.dat.match$photo.cent<-both.dat.match$photo-mean(both.dat.match$photo)
both.dat.sameforce.match<-both.dat.match %>% filter(warm %in% c(20,18)) ## Filter just the studies with same forcing
unique(both.dat.sameforce.match$GEN.SPA)
photo.only.bb.match<-brm(bday~study*PHOTO+(study*PHOTO|GEN.SPA),data=both.dat.sameforce.match,iter=3000,warmup=2500)
photo.only.lo.match<-brm(lday~study*PHOTO+(study*PHOTO|GEN.SPA),data=both.dat.sameforce.match,iter=3000,warmup=2500)
bb.output2<-rownames_to_column(as.data.frame(fixef(photo.only.bb.match,probs=c(0.1,0.9,0.25,0.75))),"Parameter")
bb.output2$Phase<-"budburst"
lo.output2<-rownames_to_column(as.data.frame(fixef(photo.only.lo.match,probs=c(0.1,0.9,0.25,0.75))),"Parameter")
lo.output2$Phase<-"leafout"
veggie2<-rbind(bb.output2,lo.output2)
veggie2$Parameter<-ifelse(veggie2$Parameter=="studyDF","InterceptDF",veggie2$Parameter)
veggie.effect2<-veggie2 %>% filter(Parameter %in% c("PHOTO","studyDF:PHOTO"))
pd2=position_dodgev(height=0.2)
plotyxx<-ggplot(veggie2,aes(Estimate,Parameter))+geom_point(aes(color=Phase,shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgrey","black"))+xlim(-50,80)
plotyyy<-ggplot(veggie.effect2,aes(Estimate,Parameter))+geom_point(aes(color=Phase, shape=Phase),position=pd2,size=3)+geom_errorbarh(aes(xmin=Q25,xmax=Q75,color=Phase),linetype="solid",position=pd2,width=0)+geom_errorbarh(aes(xmin=Q10,xmax=Q90,color=Phase),linetype="dashed",position=pd2,width=0)+geom_vline(aes(xintercept=0),color="black")+theme_base()+scale_color_manual(values=c("darkgray","black"))+xlim(-14,14)+theme(legend.position = "none",axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
plotyyy
View(veggie.effect2)
veggie.effect2
veggie.effect
save.image("periodicity_mods.RData")
